Higher Order Funcs -> funcs that receive or return other funcs
callbacks - funcs passed as parameters
closure - uses free vars outside of scope
composing funcs, currying funcs
ES6 fat arrow funcs makes it easy to write HOF

Redux middleware: enhancer
- resolve action, pass along action, generate side effect, send another dispatch, 
or a combination

Function signature - set of input/output of a func. 
Redux middleware all follow same signature
redux-logger (must be last middleware passed)

Thunks: kind of action creator that returns func instead of obj.
  - func can dispatch 1+ actions
  - used for async
  - action(dispatch)

  Object.freeze(state) - NO MUTATION (It's not a deep freeze tho)

namespace - subset of controllers that live under a specific URL

To debug arrow funcs, make sure it has explicit return

dispatch request -> middleware -> api -> dispatch response -> middleware -> reducer -> rerender

With ambiguity in fat arrow funcs, {} will return an empty block unless 
wrapped around with parentheses.

Arguments in JS: take less args (undefined) or more args (in arguments array-like obj)
Array.from on array-likes
Rest operator: ... like Ruby's * splat operator
Spread Syntax: ... Also like Ruby's * splat operator for destructuring elements
Default values in JS!

Don't name your props object keys props
connect API is outdated
Separating Redux logic into folders by type is also outdated
https://react-redux.js.org/tutorials/connect -> Learn modern practices here later

NEVER MUTATE STATE.
REDUCERS MUST BE PURE
STATE/ACTIONS SHOULD NEVER HAVE NON-SERIALIZABLE VALUES
ONLY ONE REDUX STORE PER APP
USE REDUX TOOLKIT -> IMMER FOR IMMUTABLE UPDATES -> FEATURE FOLDER APPROACH
JAM LOGIC INTO REDUCERS -> REDUCERS OWN STATE SHAPE -> NAMES... DATA TYPES, NOT COMPONENTS
NORMALIZE DATA, ACTIONS AS EVENTS, Smallest component reads from store, obj shorthand form of dispatch
call useSelector many times instead of 1 obj, use Typescript, pojo for state, 
don't put form state in Redux (Remember that Redux is for GLOBAL state)
https://redux.js.org/style-guide/

Action creators, container/presentational pattern, thunks, etc.
ReduxJS reselect -> for creating memoized selectors, name as selectThing

Modern best practices make this way easier, tbh. 
- Store using configureStore that takes reducers
- reducers and action creators made using createSlice
- selectors handled by useSelector and dispatch handled by useDispatch 
  a. aka no more mapping over props
- All the logic where it makes sense, less redirection.

rails g model ___ --no-test-framework
jquery slim doesn't have AJAX lmao...

rails new ___ --api -> No views n' stuff